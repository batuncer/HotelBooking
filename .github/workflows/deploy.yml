name: Build on DockerHub & Deploy to EC2

on:
  push:
    branches:
      - main

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  AWS_PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: ./
          push: true
          dockerfile: ./Dockerfile 
          tags: bakituncer/hotel-backend:latest

  deploy:
    needs: build  
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set permissions for private key
        run: |
          echo "${{ secrets.EC2_PRIVATE_KEY }}" > key.pem
          chmod 400 key.pem

      - name: Pull Docker image
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem  ubuntu@54.244.193.76 'sudo docker pull bakituncer/hotel-backend:latest'

      - name: Stop running container
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem  ubuntu@54.244.193.76 'sudo docker stop cyf_hotel_backend || true'
          ssh -o StrictHostKeyChecking=no -i key.pem  ubuntu@54.244.193.76 'sudo docker rm cyf_hotel_backend || true'

      - name: Run new container
        run: |
          ssh -o StrictHostKeyChecking=no -i key.pem  ubuntu@54.244.193.76 'sudo docker run -d \
           --name cyf_hotel_backend \
             -p 80:80 \
             -e DB_USER=${{ secrets.DB_USER }} \
             -e DB_PASSWORD=${{secrets.DB_PASSWORD}} \
             -e DB_HOST=${{secrets.DB_HOST}} \
             -e DB_PORT=${{secrets.DB_PORT}}  \
             -e DB_NAME=${{secrets.DB_NAME}}  \
             bakituncer/hotel-backend:latest'




# name: Deploy to EC2

# on:
#   push:
#     branches:
#       - main

# jobs:
#   build:
#     name: Build Docker Image
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v2

#       - name: Log in to DockerHub
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       - name: Build Docker image
#         run: |
#           docker build -t ${{ secrets.DOCKER_USERNAME }}/hotel-backend .
#           docker push ${{ secrets.DOCKER_USERNAME }}/hotel-backend

#   deploy:
#     name: Deploy to EC2
#     runs-on: ubuntu-latest
#     needs: build

#     steps:
#       - name: SSH into EC2 and Deploy
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ secrets.EC2_HOST }}
#           username: ${{ secrets.EC2_USERNAME }}
#           key: ${{ secrets.EC2_PRIVATE_KEY }}
#           script: |
#             docker stop hotel-backend || true
#             docker rm hotel-backend || true
#             docker pull ${{ secrets.DOCKER_USERNAME }}/hotel-backend:latest
#             docker run -d \
#               -e DB_HOST=${{ secrets.DB_HOST }} \
#               -e DB_USER=${{ secrets.DB_USER }} \
#               -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
#               -e DB_NAME=${{ secrets.DB_NAME }} \
#               -e DB_PORT=${{ secrets.DB_PORT }} \
#               -p 8080:8080 \
#               --name hotel-backend \
#               ${{ secrets.DOCKER_USERNAME }}/hotel-backend:latest
